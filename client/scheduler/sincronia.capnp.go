// Code generated by capnpc-go. DO NOT EDIT.

package scheduler

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Scheduler struct{ Client capnp.Client }

// Scheduler_TypeID is the unique identifier for the type Scheduler.
const Scheduler_TypeID = 0x82363d3c8aee92fc

func (c Scheduler) RegCoflow(ctx context.Context, params func(Scheduler_regCoflow_Params) error, opts ...capnp.CallOption) Scheduler_regCoflow_Results_Promise {
	if c.Client == nil {
		return Scheduler_regCoflow_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x82363d3c8aee92fc,
			MethodID:      0,
			InterfaceName: "../sincronia.capnp:Scheduler",
			MethodName:    "regCoflow",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Scheduler_regCoflow_Params{Struct: s}) }
	}
	return Scheduler_regCoflow_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Scheduler) SendCoflow(ctx context.Context, params func(Scheduler_sendCoflow_Params) error, opts ...capnp.CallOption) Scheduler_sendCoflow_Results_Promise {
	if c.Client == nil {
		return Scheduler_sendCoflow_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x82363d3c8aee92fc,
			MethodID:      1,
			InterfaceName: "../sincronia.capnp:Scheduler",
			MethodName:    "sendCoflow",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Scheduler_sendCoflow_Params{Struct: s}) }
	}
	return Scheduler_sendCoflow_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Scheduler) GetSchedule(ctx context.Context, params func(Scheduler_getSchedule_Params) error, opts ...capnp.CallOption) Scheduler_getSchedule_Results_Promise {
	if c.Client == nil {
		return Scheduler_getSchedule_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x82363d3c8aee92fc,
			MethodID:      2,
			InterfaceName: "../sincronia.capnp:Scheduler",
			MethodName:    "getSchedule",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Scheduler_getSchedule_Params{Struct: s}) }
	}
	return Scheduler_getSchedule_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Scheduler) CoflowDone(ctx context.Context, params func(Scheduler_coflowDone_Params) error, opts ...capnp.CallOption) Scheduler_coflowDone_Results_Promise {
	if c.Client == nil {
		return Scheduler_coflowDone_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x82363d3c8aee92fc,
			MethodID:      3,
			InterfaceName: "../sincronia.capnp:Scheduler",
			MethodName:    "coflowDone",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Scheduler_coflowDone_Params{Struct: s}) }
	}
	return Scheduler_coflowDone_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Scheduler_Server interface {
	RegCoflow(Scheduler_regCoflow) error

	SendCoflow(Scheduler_sendCoflow) error

	GetSchedule(Scheduler_getSchedule) error

	CoflowDone(Scheduler_coflowDone) error
}

func Scheduler_ServerToClient(s Scheduler_Server) Scheduler {
	c, _ := s.(server.Closer)
	return Scheduler{Client: server.New(Scheduler_Methods(nil, s), c)}
}

func Scheduler_Methods(methods []server.Method, s Scheduler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x82363d3c8aee92fc,
			MethodID:      0,
			InterfaceName: "../sincronia.capnp:Scheduler",
			MethodName:    "regCoflow",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Scheduler_regCoflow{c, opts, Scheduler_regCoflow_Params{Struct: p}, Scheduler_regCoflow_Results{Struct: r}}
			return s.RegCoflow(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x82363d3c8aee92fc,
			MethodID:      1,
			InterfaceName: "../sincronia.capnp:Scheduler",
			MethodName:    "sendCoflow",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Scheduler_sendCoflow{c, opts, Scheduler_sendCoflow_Params{Struct: p}, Scheduler_sendCoflow_Results{Struct: r}}
			return s.SendCoflow(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x82363d3c8aee92fc,
			MethodID:      2,
			InterfaceName: "../sincronia.capnp:Scheduler",
			MethodName:    "getSchedule",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Scheduler_getSchedule{c, opts, Scheduler_getSchedule_Params{Struct: p}, Scheduler_getSchedule_Results{Struct: r}}
			return s.GetSchedule(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x82363d3c8aee92fc,
			MethodID:      3,
			InterfaceName: "../sincronia.capnp:Scheduler",
			MethodName:    "coflowDone",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Scheduler_coflowDone{c, opts, Scheduler_coflowDone_Params{Struct: p}, Scheduler_coflowDone_Results{Struct: r}}
			return s.CoflowDone(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	return methods
}

// Scheduler_regCoflow holds the arguments for a server call to Scheduler.regCoflow.
type Scheduler_regCoflow struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Scheduler_regCoflow_Params
	Results Scheduler_regCoflow_Results
}

// Scheduler_sendCoflow holds the arguments for a server call to Scheduler.sendCoflow.
type Scheduler_sendCoflow struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Scheduler_sendCoflow_Params
	Results Scheduler_sendCoflow_Results
}

// Scheduler_getSchedule holds the arguments for a server call to Scheduler.getSchedule.
type Scheduler_getSchedule struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Scheduler_getSchedule_Params
	Results Scheduler_getSchedule_Results
}

// Scheduler_coflowDone holds the arguments for a server call to Scheduler.coflowDone.
type Scheduler_coflowDone struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Scheduler_coflowDone_Params
	Results Scheduler_coflowDone_Results
}

type Scheduler_SchInfo struct{ capnp.Struct }

// Scheduler_SchInfo_TypeID is the unique identifier for the type Scheduler_SchInfo.
const Scheduler_SchInfo_TypeID = 0xa0562a8ee9a0de4f

func NewScheduler_SchInfo(s *capnp.Segment) (Scheduler_SchInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Scheduler_SchInfo{st}, err
}

func NewRootScheduler_SchInfo(s *capnp.Segment) (Scheduler_SchInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Scheduler_SchInfo{st}, err
}

func ReadRootScheduler_SchInfo(msg *capnp.Message) (Scheduler_SchInfo, error) {
	root, err := msg.RootPtr()
	return Scheduler_SchInfo{root.Struct()}, err
}

func (s Scheduler_SchInfo) String() string {
	str, _ := text.Marshal(0xa0562a8ee9a0de4f, s.Struct)
	return str
}

func (s Scheduler_SchInfo) DataID() uint32 {
	return s.Struct.Uint32(0)
}

func (s Scheduler_SchInfo) SetDataID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Scheduler_SchInfo) Size() uint32 {
	return s.Struct.Uint32(4)
}

func (s Scheduler_SchInfo) SetSize(v uint32) {
	s.Struct.SetUint32(4, v)
}

// Scheduler_SchInfo_List is a list of Scheduler_SchInfo.
type Scheduler_SchInfo_List struct{ capnp.List }

// NewScheduler_SchInfo creates a new list of Scheduler_SchInfo.
func NewScheduler_SchInfo_List(s *capnp.Segment, sz int32) (Scheduler_SchInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Scheduler_SchInfo_List{l}, err
}

func (s Scheduler_SchInfo_List) At(i int) Scheduler_SchInfo {
	return Scheduler_SchInfo{s.List.Struct(i)}
}

func (s Scheduler_SchInfo_List) Set(i int, v Scheduler_SchInfo) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Scheduler_SchInfo_List) String() string {
	str, _ := text.MarshalList(0xa0562a8ee9a0de4f, s.List)
	return str
}

// Scheduler_SchInfo_Promise is a wrapper for a Scheduler_SchInfo promised by a client call.
type Scheduler_SchInfo_Promise struct{ *capnp.Pipeline }

func (p Scheduler_SchInfo_Promise) Struct() (Scheduler_SchInfo, error) {
	s, err := p.Pipeline.Struct()
	return Scheduler_SchInfo{s}, err
}

type Scheduler_Flow struct{ capnp.Struct }

// Scheduler_Flow_TypeID is the unique identifier for the type Scheduler_Flow.
const Scheduler_Flow_TypeID = 0xac1d9efa0b648458

func NewScheduler_Flow(s *capnp.Segment) (Scheduler_Flow, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Scheduler_Flow{st}, err
}

func NewRootScheduler_Flow(s *capnp.Segment) (Scheduler_Flow, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Scheduler_Flow{st}, err
}

func ReadRootScheduler_Flow(msg *capnp.Message) (Scheduler_Flow, error) {
	root, err := msg.RootPtr()
	return Scheduler_Flow{root.Struct()}, err
}

func (s Scheduler_Flow) String() string {
	str, _ := text.Marshal(0xac1d9efa0b648458, s.Struct)
	return str
}

func (s Scheduler_Flow) From() uint32 {
	return s.Struct.Uint32(0)
}

func (s Scheduler_Flow) SetFrom(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Scheduler_Flow) To() uint32 {
	return s.Struct.Uint32(4)
}

func (s Scheduler_Flow) SetTo(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s Scheduler_Flow) Data() (Scheduler_SchInfo, error) {
	p, err := s.Struct.Ptr(0)
	return Scheduler_SchInfo{Struct: p.Struct()}, err
}

func (s Scheduler_Flow) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Scheduler_Flow) SetData(v Scheduler_SchInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewData sets the data field to a newly
// allocated Scheduler_SchInfo struct, preferring placement in s's segment.
func (s Scheduler_Flow) NewData() (Scheduler_SchInfo, error) {
	ss, err := NewScheduler_SchInfo(s.Struct.Segment())
	if err != nil {
		return Scheduler_SchInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Scheduler_Flow_List is a list of Scheduler_Flow.
type Scheduler_Flow_List struct{ capnp.List }

// NewScheduler_Flow creates a new list of Scheduler_Flow.
func NewScheduler_Flow_List(s *capnp.Segment, sz int32) (Scheduler_Flow_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Scheduler_Flow_List{l}, err
}

func (s Scheduler_Flow_List) At(i int) Scheduler_Flow { return Scheduler_Flow{s.List.Struct(i)} }

func (s Scheduler_Flow_List) Set(i int, v Scheduler_Flow) error { return s.List.SetStruct(i, v.Struct) }

func (s Scheduler_Flow_List) String() string {
	str, _ := text.MarshalList(0xac1d9efa0b648458, s.List)
	return str
}

// Scheduler_Flow_Promise is a wrapper for a Scheduler_Flow promised by a client call.
type Scheduler_Flow_Promise struct{ *capnp.Pipeline }

func (p Scheduler_Flow_Promise) Struct() (Scheduler_Flow, error) {
	s, err := p.Pipeline.Struct()
	return Scheduler_Flow{s}, err
}

func (p Scheduler_Flow_Promise) Data() Scheduler_SchInfo_Promise {
	return Scheduler_SchInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Scheduler_Coflow struct{ capnp.Struct }

// Scheduler_Coflow_TypeID is the unique identifier for the type Scheduler_Coflow.
const Scheduler_Coflow_TypeID = 0xcc4fd389b84e7a6e

func NewScheduler_Coflow(s *capnp.Segment) (Scheduler_Coflow, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Scheduler_Coflow{st}, err
}

func NewRootScheduler_Coflow(s *capnp.Segment) (Scheduler_Coflow, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Scheduler_Coflow{st}, err
}

func ReadRootScheduler_Coflow(msg *capnp.Message) (Scheduler_Coflow, error) {
	root, err := msg.RootPtr()
	return Scheduler_Coflow{root.Struct()}, err
}

func (s Scheduler_Coflow) String() string {
	str, _ := text.Marshal(0xcc4fd389b84e7a6e, s.Struct)
	return str
}

func (s Scheduler_Coflow) JobID() uint32 {
	return s.Struct.Uint32(0)
}

func (s Scheduler_Coflow) SetJobID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Scheduler_Coflow) Flows() (Scheduler_Flow_List, error) {
	p, err := s.Struct.Ptr(0)
	return Scheduler_Flow_List{List: p.List()}, err
}

func (s Scheduler_Coflow) HasFlows() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Scheduler_Coflow) SetFlows(v Scheduler_Flow_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewFlows sets the flows field to a newly
// allocated Scheduler_Flow_List, preferring placement in s's segment.
func (s Scheduler_Coflow) NewFlows(n int32) (Scheduler_Flow_List, error) {
	l, err := NewScheduler_Flow_List(s.Struct.Segment(), n)
	if err != nil {
		return Scheduler_Flow_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Scheduler_Coflow_List is a list of Scheduler_Coflow.
type Scheduler_Coflow_List struct{ capnp.List }

// NewScheduler_Coflow creates a new list of Scheduler_Coflow.
func NewScheduler_Coflow_List(s *capnp.Segment, sz int32) (Scheduler_Coflow_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Scheduler_Coflow_List{l}, err
}

func (s Scheduler_Coflow_List) At(i int) Scheduler_Coflow { return Scheduler_Coflow{s.List.Struct(i)} }

func (s Scheduler_Coflow_List) Set(i int, v Scheduler_Coflow) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Scheduler_Coflow_List) String() string {
	str, _ := text.MarshalList(0xcc4fd389b84e7a6e, s.List)
	return str
}

// Scheduler_Coflow_Promise is a wrapper for a Scheduler_Coflow promised by a client call.
type Scheduler_Coflow_Promise struct{ *capnp.Pipeline }

func (p Scheduler_Coflow_Promise) Struct() (Scheduler_Coflow, error) {
	s, err := p.Pipeline.Struct()
	return Scheduler_Coflow{s}, err
}

type Scheduler_CoflowSchedule struct{ capnp.Struct }

// Scheduler_CoflowSchedule_TypeID is the unique identifier for the type Scheduler_CoflowSchedule.
const Scheduler_CoflowSchedule_TypeID = 0xf46ea343d55053bc

func NewScheduler_CoflowSchedule(s *capnp.Segment) (Scheduler_CoflowSchedule, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Scheduler_CoflowSchedule{st}, err
}

func NewRootScheduler_CoflowSchedule(s *capnp.Segment) (Scheduler_CoflowSchedule, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Scheduler_CoflowSchedule{st}, err
}

func ReadRootScheduler_CoflowSchedule(msg *capnp.Message) (Scheduler_CoflowSchedule, error) {
	root, err := msg.RootPtr()
	return Scheduler_CoflowSchedule{root.Struct()}, err
}

func (s Scheduler_CoflowSchedule) String() string {
	str, _ := text.Marshal(0xf46ea343d55053bc, s.Struct)
	return str
}

func (s Scheduler_CoflowSchedule) JobID() uint32 {
	return s.Struct.Uint32(0)
}

func (s Scheduler_CoflowSchedule) SetJobID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Scheduler_CoflowSchedule) Priority() uint32 {
	return s.Struct.Uint32(4)
}

func (s Scheduler_CoflowSchedule) SetPriority(v uint32) {
	s.Struct.SetUint32(4, v)
}

// Scheduler_CoflowSchedule_List is a list of Scheduler_CoflowSchedule.
type Scheduler_CoflowSchedule_List struct{ capnp.List }

// NewScheduler_CoflowSchedule creates a new list of Scheduler_CoflowSchedule.
func NewScheduler_CoflowSchedule_List(s *capnp.Segment, sz int32) (Scheduler_CoflowSchedule_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Scheduler_CoflowSchedule_List{l}, err
}

func (s Scheduler_CoflowSchedule_List) At(i int) Scheduler_CoflowSchedule {
	return Scheduler_CoflowSchedule{s.List.Struct(i)}
}

func (s Scheduler_CoflowSchedule_List) Set(i int, v Scheduler_CoflowSchedule) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Scheduler_CoflowSchedule_List) String() string {
	str, _ := text.MarshalList(0xf46ea343d55053bc, s.List)
	return str
}

// Scheduler_CoflowSchedule_Promise is a wrapper for a Scheduler_CoflowSchedule promised by a client call.
type Scheduler_CoflowSchedule_Promise struct{ *capnp.Pipeline }

func (p Scheduler_CoflowSchedule_Promise) Struct() (Scheduler_CoflowSchedule, error) {
	s, err := p.Pipeline.Struct()
	return Scheduler_CoflowSchedule{s}, err
}

type Scheduler_regCoflow_Params struct{ capnp.Struct }

// Scheduler_regCoflow_Params_TypeID is the unique identifier for the type Scheduler_regCoflow_Params.
const Scheduler_regCoflow_Params_TypeID = 0xf569c984307010aa

func NewScheduler_regCoflow_Params(s *capnp.Segment) (Scheduler_regCoflow_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Scheduler_regCoflow_Params{st}, err
}

func NewRootScheduler_regCoflow_Params(s *capnp.Segment) (Scheduler_regCoflow_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Scheduler_regCoflow_Params{st}, err
}

func ReadRootScheduler_regCoflow_Params(msg *capnp.Message) (Scheduler_regCoflow_Params, error) {
	root, err := msg.RootPtr()
	return Scheduler_regCoflow_Params{root.Struct()}, err
}

func (s Scheduler_regCoflow_Params) String() string {
	str, _ := text.Marshal(0xf569c984307010aa, s.Struct)
	return str
}

func (s Scheduler_regCoflow_Params) Coflows() (Scheduler_Coflow_List, error) {
	p, err := s.Struct.Ptr(0)
	return Scheduler_Coflow_List{List: p.List()}, err
}

func (s Scheduler_regCoflow_Params) HasCoflows() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Scheduler_regCoflow_Params) SetCoflows(v Scheduler_Coflow_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCoflows sets the coflows field to a newly
// allocated Scheduler_Coflow_List, preferring placement in s's segment.
func (s Scheduler_regCoflow_Params) NewCoflows(n int32) (Scheduler_Coflow_List, error) {
	l, err := NewScheduler_Coflow_List(s.Struct.Segment(), n)
	if err != nil {
		return Scheduler_Coflow_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Scheduler_regCoflow_Params_List is a list of Scheduler_regCoflow_Params.
type Scheduler_regCoflow_Params_List struct{ capnp.List }

// NewScheduler_regCoflow_Params creates a new list of Scheduler_regCoflow_Params.
func NewScheduler_regCoflow_Params_List(s *capnp.Segment, sz int32) (Scheduler_regCoflow_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Scheduler_regCoflow_Params_List{l}, err
}

func (s Scheduler_regCoflow_Params_List) At(i int) Scheduler_regCoflow_Params {
	return Scheduler_regCoflow_Params{s.List.Struct(i)}
}

func (s Scheduler_regCoflow_Params_List) Set(i int, v Scheduler_regCoflow_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Scheduler_regCoflow_Params_List) String() string {
	str, _ := text.MarshalList(0xf569c984307010aa, s.List)
	return str
}

// Scheduler_regCoflow_Params_Promise is a wrapper for a Scheduler_regCoflow_Params promised by a client call.
type Scheduler_regCoflow_Params_Promise struct{ *capnp.Pipeline }

func (p Scheduler_regCoflow_Params_Promise) Struct() (Scheduler_regCoflow_Params, error) {
	s, err := p.Pipeline.Struct()
	return Scheduler_regCoflow_Params{s}, err
}

type Scheduler_regCoflow_Results struct{ capnp.Struct }

// Scheduler_regCoflow_Results_TypeID is the unique identifier for the type Scheduler_regCoflow_Results.
const Scheduler_regCoflow_Results_TypeID = 0xef088f109f1054db

func NewScheduler_regCoflow_Results(s *capnp.Segment) (Scheduler_regCoflow_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Scheduler_regCoflow_Results{st}, err
}

func NewRootScheduler_regCoflow_Results(s *capnp.Segment) (Scheduler_regCoflow_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Scheduler_regCoflow_Results{st}, err
}

func ReadRootScheduler_regCoflow_Results(msg *capnp.Message) (Scheduler_regCoflow_Results, error) {
	root, err := msg.RootPtr()
	return Scheduler_regCoflow_Results{root.Struct()}, err
}

func (s Scheduler_regCoflow_Results) String() string {
	str, _ := text.Marshal(0xef088f109f1054db, s.Struct)
	return str
}

// Scheduler_regCoflow_Results_List is a list of Scheduler_regCoflow_Results.
type Scheduler_regCoflow_Results_List struct{ capnp.List }

// NewScheduler_regCoflow_Results creates a new list of Scheduler_regCoflow_Results.
func NewScheduler_regCoflow_Results_List(s *capnp.Segment, sz int32) (Scheduler_regCoflow_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Scheduler_regCoflow_Results_List{l}, err
}

func (s Scheduler_regCoflow_Results_List) At(i int) Scheduler_regCoflow_Results {
	return Scheduler_regCoflow_Results{s.List.Struct(i)}
}

func (s Scheduler_regCoflow_Results_List) Set(i int, v Scheduler_regCoflow_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Scheduler_regCoflow_Results_List) String() string {
	str, _ := text.MarshalList(0xef088f109f1054db, s.List)
	return str
}

// Scheduler_regCoflow_Results_Promise is a wrapper for a Scheduler_regCoflow_Results promised by a client call.
type Scheduler_regCoflow_Results_Promise struct{ *capnp.Pipeline }

func (p Scheduler_regCoflow_Results_Promise) Struct() (Scheduler_regCoflow_Results, error) {
	s, err := p.Pipeline.Struct()
	return Scheduler_regCoflow_Results{s}, err
}

type Scheduler_sendCoflow_Params struct{ capnp.Struct }

// Scheduler_sendCoflow_Params_TypeID is the unique identifier for the type Scheduler_sendCoflow_Params.
const Scheduler_sendCoflow_Params_TypeID = 0x9310d4d740ee0edc

func NewScheduler_sendCoflow_Params(s *capnp.Segment) (Scheduler_sendCoflow_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Scheduler_sendCoflow_Params{st}, err
}

func NewRootScheduler_sendCoflow_Params(s *capnp.Segment) (Scheduler_sendCoflow_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Scheduler_sendCoflow_Params{st}, err
}

func ReadRootScheduler_sendCoflow_Params(msg *capnp.Message) (Scheduler_sendCoflow_Params, error) {
	root, err := msg.RootPtr()
	return Scheduler_sendCoflow_Params{root.Struct()}, err
}

func (s Scheduler_sendCoflow_Params) String() string {
	str, _ := text.Marshal(0x9310d4d740ee0edc, s.Struct)
	return str
}

func (s Scheduler_sendCoflow_Params) NodeID() uint32 {
	return s.Struct.Uint32(0)
}

func (s Scheduler_sendCoflow_Params) SetNodeID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Scheduler_sendCoflow_Params) JobID() uint32 {
	return s.Struct.Uint32(4)
}

func (s Scheduler_sendCoflow_Params) SetJobID(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s Scheduler_sendCoflow_Params) Sending() (Scheduler_SchInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return Scheduler_SchInfo_List{List: p.List()}, err
}

func (s Scheduler_sendCoflow_Params) HasSending() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Scheduler_sendCoflow_Params) SetSending(v Scheduler_SchInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSending sets the sending field to a newly
// allocated Scheduler_SchInfo_List, preferring placement in s's segment.
func (s Scheduler_sendCoflow_Params) NewSending(n int32) (Scheduler_SchInfo_List, error) {
	l, err := NewScheduler_SchInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return Scheduler_SchInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Scheduler_sendCoflow_Params_List is a list of Scheduler_sendCoflow_Params.
type Scheduler_sendCoflow_Params_List struct{ capnp.List }

// NewScheduler_sendCoflow_Params creates a new list of Scheduler_sendCoflow_Params.
func NewScheduler_sendCoflow_Params_List(s *capnp.Segment, sz int32) (Scheduler_sendCoflow_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Scheduler_sendCoflow_Params_List{l}, err
}

func (s Scheduler_sendCoflow_Params_List) At(i int) Scheduler_sendCoflow_Params {
	return Scheduler_sendCoflow_Params{s.List.Struct(i)}
}

func (s Scheduler_sendCoflow_Params_List) Set(i int, v Scheduler_sendCoflow_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Scheduler_sendCoflow_Params_List) String() string {
	str, _ := text.MarshalList(0x9310d4d740ee0edc, s.List)
	return str
}

// Scheduler_sendCoflow_Params_Promise is a wrapper for a Scheduler_sendCoflow_Params promised by a client call.
type Scheduler_sendCoflow_Params_Promise struct{ *capnp.Pipeline }

func (p Scheduler_sendCoflow_Params_Promise) Struct() (Scheduler_sendCoflow_Params, error) {
	s, err := p.Pipeline.Struct()
	return Scheduler_sendCoflow_Params{s}, err
}

type Scheduler_sendCoflow_Results struct{ capnp.Struct }

// Scheduler_sendCoflow_Results_TypeID is the unique identifier for the type Scheduler_sendCoflow_Results.
const Scheduler_sendCoflow_Results_TypeID = 0xe0539e3e7cbcc75b

func NewScheduler_sendCoflow_Results(s *capnp.Segment) (Scheduler_sendCoflow_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Scheduler_sendCoflow_Results{st}, err
}

func NewRootScheduler_sendCoflow_Results(s *capnp.Segment) (Scheduler_sendCoflow_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Scheduler_sendCoflow_Results{st}, err
}

func ReadRootScheduler_sendCoflow_Results(msg *capnp.Message) (Scheduler_sendCoflow_Results, error) {
	root, err := msg.RootPtr()
	return Scheduler_sendCoflow_Results{root.Struct()}, err
}

func (s Scheduler_sendCoflow_Results) String() string {
	str, _ := text.Marshal(0xe0539e3e7cbcc75b, s.Struct)
	return str
}

func (s Scheduler_sendCoflow_Results) Receiving() (Scheduler_SchInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return Scheduler_SchInfo_List{List: p.List()}, err
}

func (s Scheduler_sendCoflow_Results) HasReceiving() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Scheduler_sendCoflow_Results) SetReceiving(v Scheduler_SchInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewReceiving sets the receiving field to a newly
// allocated Scheduler_SchInfo_List, preferring placement in s's segment.
func (s Scheduler_sendCoflow_Results) NewReceiving(n int32) (Scheduler_SchInfo_List, error) {
	l, err := NewScheduler_SchInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return Scheduler_SchInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Scheduler_sendCoflow_Results_List is a list of Scheduler_sendCoflow_Results.
type Scheduler_sendCoflow_Results_List struct{ capnp.List }

// NewScheduler_sendCoflow_Results creates a new list of Scheduler_sendCoflow_Results.
func NewScheduler_sendCoflow_Results_List(s *capnp.Segment, sz int32) (Scheduler_sendCoflow_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Scheduler_sendCoflow_Results_List{l}, err
}

func (s Scheduler_sendCoflow_Results_List) At(i int) Scheduler_sendCoflow_Results {
	return Scheduler_sendCoflow_Results{s.List.Struct(i)}
}

func (s Scheduler_sendCoflow_Results_List) Set(i int, v Scheduler_sendCoflow_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Scheduler_sendCoflow_Results_List) String() string {
	str, _ := text.MarshalList(0xe0539e3e7cbcc75b, s.List)
	return str
}

// Scheduler_sendCoflow_Results_Promise is a wrapper for a Scheduler_sendCoflow_Results promised by a client call.
type Scheduler_sendCoflow_Results_Promise struct{ *capnp.Pipeline }

func (p Scheduler_sendCoflow_Results_Promise) Struct() (Scheduler_sendCoflow_Results, error) {
	s, err := p.Pipeline.Struct()
	return Scheduler_sendCoflow_Results{s}, err
}

type Scheduler_getSchedule_Params struct{ capnp.Struct }

// Scheduler_getSchedule_Params_TypeID is the unique identifier for the type Scheduler_getSchedule_Params.
const Scheduler_getSchedule_Params_TypeID = 0xebd37829dc92faff

func NewScheduler_getSchedule_Params(s *capnp.Segment) (Scheduler_getSchedule_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Scheduler_getSchedule_Params{st}, err
}

func NewRootScheduler_getSchedule_Params(s *capnp.Segment) (Scheduler_getSchedule_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Scheduler_getSchedule_Params{st}, err
}

func ReadRootScheduler_getSchedule_Params(msg *capnp.Message) (Scheduler_getSchedule_Params, error) {
	root, err := msg.RootPtr()
	return Scheduler_getSchedule_Params{root.Struct()}, err
}

func (s Scheduler_getSchedule_Params) String() string {
	str, _ := text.Marshal(0xebd37829dc92faff, s.Struct)
	return str
}

func (s Scheduler_getSchedule_Params) NodeId() uint32 {
	return s.Struct.Uint32(0)
}

func (s Scheduler_getSchedule_Params) SetNodeId(v uint32) {
	s.Struct.SetUint32(0, v)
}

// Scheduler_getSchedule_Params_List is a list of Scheduler_getSchedule_Params.
type Scheduler_getSchedule_Params_List struct{ capnp.List }

// NewScheduler_getSchedule_Params creates a new list of Scheduler_getSchedule_Params.
func NewScheduler_getSchedule_Params_List(s *capnp.Segment, sz int32) (Scheduler_getSchedule_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Scheduler_getSchedule_Params_List{l}, err
}

func (s Scheduler_getSchedule_Params_List) At(i int) Scheduler_getSchedule_Params {
	return Scheduler_getSchedule_Params{s.List.Struct(i)}
}

func (s Scheduler_getSchedule_Params_List) Set(i int, v Scheduler_getSchedule_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Scheduler_getSchedule_Params_List) String() string {
	str, _ := text.MarshalList(0xebd37829dc92faff, s.List)
	return str
}

// Scheduler_getSchedule_Params_Promise is a wrapper for a Scheduler_getSchedule_Params promised by a client call.
type Scheduler_getSchedule_Params_Promise struct{ *capnp.Pipeline }

func (p Scheduler_getSchedule_Params_Promise) Struct() (Scheduler_getSchedule_Params, error) {
	s, err := p.Pipeline.Struct()
	return Scheduler_getSchedule_Params{s}, err
}

type Scheduler_getSchedule_Results struct{ capnp.Struct }

// Scheduler_getSchedule_Results_TypeID is the unique identifier for the type Scheduler_getSchedule_Results.
const Scheduler_getSchedule_Results_TypeID = 0x922d69c2b770a704

func NewScheduler_getSchedule_Results(s *capnp.Segment) (Scheduler_getSchedule_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Scheduler_getSchedule_Results{st}, err
}

func NewRootScheduler_getSchedule_Results(s *capnp.Segment) (Scheduler_getSchedule_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Scheduler_getSchedule_Results{st}, err
}

func ReadRootScheduler_getSchedule_Results(msg *capnp.Message) (Scheduler_getSchedule_Results, error) {
	root, err := msg.RootPtr()
	return Scheduler_getSchedule_Results{root.Struct()}, err
}

func (s Scheduler_getSchedule_Results) String() string {
	str, _ := text.Marshal(0x922d69c2b770a704, s.Struct)
	return str
}

func (s Scheduler_getSchedule_Results) Schedule() (Scheduler_CoflowSchedule_List, error) {
	p, err := s.Struct.Ptr(0)
	return Scheduler_CoflowSchedule_List{List: p.List()}, err
}

func (s Scheduler_getSchedule_Results) HasSchedule() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Scheduler_getSchedule_Results) SetSchedule(v Scheduler_CoflowSchedule_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSchedule sets the schedule field to a newly
// allocated Scheduler_CoflowSchedule_List, preferring placement in s's segment.
func (s Scheduler_getSchedule_Results) NewSchedule(n int32) (Scheduler_CoflowSchedule_List, error) {
	l, err := NewScheduler_CoflowSchedule_List(s.Struct.Segment(), n)
	if err != nil {
		return Scheduler_CoflowSchedule_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Scheduler_getSchedule_Results_List is a list of Scheduler_getSchedule_Results.
type Scheduler_getSchedule_Results_List struct{ capnp.List }

// NewScheduler_getSchedule_Results creates a new list of Scheduler_getSchedule_Results.
func NewScheduler_getSchedule_Results_List(s *capnp.Segment, sz int32) (Scheduler_getSchedule_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Scheduler_getSchedule_Results_List{l}, err
}

func (s Scheduler_getSchedule_Results_List) At(i int) Scheduler_getSchedule_Results {
	return Scheduler_getSchedule_Results{s.List.Struct(i)}
}

func (s Scheduler_getSchedule_Results_List) Set(i int, v Scheduler_getSchedule_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Scheduler_getSchedule_Results_List) String() string {
	str, _ := text.MarshalList(0x922d69c2b770a704, s.List)
	return str
}

// Scheduler_getSchedule_Results_Promise is a wrapper for a Scheduler_getSchedule_Results promised by a client call.
type Scheduler_getSchedule_Results_Promise struct{ *capnp.Pipeline }

func (p Scheduler_getSchedule_Results_Promise) Struct() (Scheduler_getSchedule_Results, error) {
	s, err := p.Pipeline.Struct()
	return Scheduler_getSchedule_Results{s}, err
}

type Scheduler_coflowDone_Params struct{ capnp.Struct }

// Scheduler_coflowDone_Params_TypeID is the unique identifier for the type Scheduler_coflowDone_Params.
const Scheduler_coflowDone_Params_TypeID = 0xbee7b2f268d14cef

func NewScheduler_coflowDone_Params(s *capnp.Segment) (Scheduler_coflowDone_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Scheduler_coflowDone_Params{st}, err
}

func NewRootScheduler_coflowDone_Params(s *capnp.Segment) (Scheduler_coflowDone_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Scheduler_coflowDone_Params{st}, err
}

func ReadRootScheduler_coflowDone_Params(msg *capnp.Message) (Scheduler_coflowDone_Params, error) {
	root, err := msg.RootPtr()
	return Scheduler_coflowDone_Params{root.Struct()}, err
}

func (s Scheduler_coflowDone_Params) String() string {
	str, _ := text.Marshal(0xbee7b2f268d14cef, s.Struct)
	return str
}

func (s Scheduler_coflowDone_Params) JobId() uint32 {
	return s.Struct.Uint32(0)
}

func (s Scheduler_coflowDone_Params) SetJobId(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Scheduler_coflowDone_Params) NodeId() uint32 {
	return s.Struct.Uint32(4)
}

func (s Scheduler_coflowDone_Params) SetNodeId(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s Scheduler_coflowDone_Params) Finished() (capnp.UInt32List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt32List{List: p.List()}, err
}

func (s Scheduler_coflowDone_Params) HasFinished() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Scheduler_coflowDone_Params) SetFinished(v capnp.UInt32List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewFinished sets the finished field to a newly
// allocated capnp.UInt32List, preferring placement in s's segment.
func (s Scheduler_coflowDone_Params) NewFinished(n int32) (capnp.UInt32List, error) {
	l, err := capnp.NewUInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt32List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Scheduler_coflowDone_Params_List is a list of Scheduler_coflowDone_Params.
type Scheduler_coflowDone_Params_List struct{ capnp.List }

// NewScheduler_coflowDone_Params creates a new list of Scheduler_coflowDone_Params.
func NewScheduler_coflowDone_Params_List(s *capnp.Segment, sz int32) (Scheduler_coflowDone_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Scheduler_coflowDone_Params_List{l}, err
}

func (s Scheduler_coflowDone_Params_List) At(i int) Scheduler_coflowDone_Params {
	return Scheduler_coflowDone_Params{s.List.Struct(i)}
}

func (s Scheduler_coflowDone_Params_List) Set(i int, v Scheduler_coflowDone_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Scheduler_coflowDone_Params_List) String() string {
	str, _ := text.MarshalList(0xbee7b2f268d14cef, s.List)
	return str
}

// Scheduler_coflowDone_Params_Promise is a wrapper for a Scheduler_coflowDone_Params promised by a client call.
type Scheduler_coflowDone_Params_Promise struct{ *capnp.Pipeline }

func (p Scheduler_coflowDone_Params_Promise) Struct() (Scheduler_coflowDone_Params, error) {
	s, err := p.Pipeline.Struct()
	return Scheduler_coflowDone_Params{s}, err
}

type Scheduler_coflowDone_Results struct{ capnp.Struct }

// Scheduler_coflowDone_Results_TypeID is the unique identifier for the type Scheduler_coflowDone_Results.
const Scheduler_coflowDone_Results_TypeID = 0xe99c9a7aa9bff532

func NewScheduler_coflowDone_Results(s *capnp.Segment) (Scheduler_coflowDone_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Scheduler_coflowDone_Results{st}, err
}

func NewRootScheduler_coflowDone_Results(s *capnp.Segment) (Scheduler_coflowDone_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Scheduler_coflowDone_Results{st}, err
}

func ReadRootScheduler_coflowDone_Results(msg *capnp.Message) (Scheduler_coflowDone_Results, error) {
	root, err := msg.RootPtr()
	return Scheduler_coflowDone_Results{root.Struct()}, err
}

func (s Scheduler_coflowDone_Results) String() string {
	str, _ := text.Marshal(0xe99c9a7aa9bff532, s.Struct)
	return str
}

// Scheduler_coflowDone_Results_List is a list of Scheduler_coflowDone_Results.
type Scheduler_coflowDone_Results_List struct{ capnp.List }

// NewScheduler_coflowDone_Results creates a new list of Scheduler_coflowDone_Results.
func NewScheduler_coflowDone_Results_List(s *capnp.Segment, sz int32) (Scheduler_coflowDone_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Scheduler_coflowDone_Results_List{l}, err
}

func (s Scheduler_coflowDone_Results_List) At(i int) Scheduler_coflowDone_Results {
	return Scheduler_coflowDone_Results{s.List.Struct(i)}
}

func (s Scheduler_coflowDone_Results_List) Set(i int, v Scheduler_coflowDone_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Scheduler_coflowDone_Results_List) String() string {
	str, _ := text.MarshalList(0xe99c9a7aa9bff532, s.List)
	return str
}

// Scheduler_coflowDone_Results_Promise is a wrapper for a Scheduler_coflowDone_Results promised by a client call.
type Scheduler_coflowDone_Results_Promise struct{ *capnp.Pipeline }

func (p Scheduler_coflowDone_Results_Promise) Struct() (Scheduler_coflowDone_Results, error) {
	s, err := p.Pipeline.Struct()
	return Scheduler_coflowDone_Results{s}, err
}

type Receiver struct{ Client capnp.Client }

// Receiver_TypeID is the unique identifier for the type Receiver.
const Receiver_TypeID = 0xeea852ea7c66bb0a

func (c Receiver) Send(ctx context.Context, params func(Receiver_send_Params) error, opts ...capnp.CallOption) Receiver_send_Results_Promise {
	if c.Client == nil {
		return Receiver_send_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xeea852ea7c66bb0a,
			MethodID:      0,
			InterfaceName: "../sincronia.capnp:Receiver",
			MethodName:    "send",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Receiver_send_Params{Struct: s}) }
	}
	return Receiver_send_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Receiver_Server interface {
	Send(Receiver_send) error
}

func Receiver_ServerToClient(s Receiver_Server) Receiver {
	c, _ := s.(server.Closer)
	return Receiver{Client: server.New(Receiver_Methods(nil, s), c)}
}

func Receiver_Methods(methods []server.Method, s Receiver_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xeea852ea7c66bb0a,
			MethodID:      0,
			InterfaceName: "../sincronia.capnp:Receiver",
			MethodName:    "send",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Receiver_send{c, opts, Receiver_send_Params{Struct: p}, Receiver_send_Results{Struct: r}}
			return s.Send(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	return methods
}

// Receiver_send holds the arguments for a server call to Receiver.send.
type Receiver_send struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Receiver_send_Params
	Results Receiver_send_Results
}

type Receiver_SndInfo struct{ capnp.Struct }

// Receiver_SndInfo_TypeID is the unique identifier for the type Receiver_SndInfo.
const Receiver_SndInfo_TypeID = 0xf244c59733de0171

func NewReceiver_SndInfo(s *capnp.Segment) (Receiver_SndInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Receiver_SndInfo{st}, err
}

func NewRootReceiver_SndInfo(s *capnp.Segment) (Receiver_SndInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Receiver_SndInfo{st}, err
}

func ReadRootReceiver_SndInfo(msg *capnp.Message) (Receiver_SndInfo, error) {
	root, err := msg.RootPtr()
	return Receiver_SndInfo{root.Struct()}, err
}

func (s Receiver_SndInfo) String() string {
	str, _ := text.Marshal(0xf244c59733de0171, s.Struct)
	return str
}

func (s Receiver_SndInfo) JobID() uint32 {
	return s.Struct.Uint32(0)
}

func (s Receiver_SndInfo) SetJobID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Receiver_SndInfo) DataID() uint32 {
	return s.Struct.Uint32(12)
}

func (s Receiver_SndInfo) SetDataID(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s Receiver_SndInfo) From() uint32 {
	return s.Struct.Uint32(4)
}

func (s Receiver_SndInfo) SetFrom(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s Receiver_SndInfo) To() uint32 {
	return s.Struct.Uint32(8)
}

func (s Receiver_SndInfo) SetTo(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s Receiver_SndInfo) Blob() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Receiver_SndInfo) HasBlob() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Receiver_SndInfo) SetBlob(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Receiver_SndInfo_List is a list of Receiver_SndInfo.
type Receiver_SndInfo_List struct{ capnp.List }

// NewReceiver_SndInfo creates a new list of Receiver_SndInfo.
func NewReceiver_SndInfo_List(s *capnp.Segment, sz int32) (Receiver_SndInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Receiver_SndInfo_List{l}, err
}

func (s Receiver_SndInfo_List) At(i int) Receiver_SndInfo { return Receiver_SndInfo{s.List.Struct(i)} }

func (s Receiver_SndInfo_List) Set(i int, v Receiver_SndInfo) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Receiver_SndInfo_List) String() string {
	str, _ := text.MarshalList(0xf244c59733de0171, s.List)
	return str
}

// Receiver_SndInfo_Promise is a wrapper for a Receiver_SndInfo promised by a client call.
type Receiver_SndInfo_Promise struct{ *capnp.Pipeline }

func (p Receiver_SndInfo_Promise) Struct() (Receiver_SndInfo, error) {
	s, err := p.Pipeline.Struct()
	return Receiver_SndInfo{s}, err
}

type Receiver_send_Params struct{ capnp.Struct }

// Receiver_send_Params_TypeID is the unique identifier for the type Receiver_send_Params.
const Receiver_send_Params_TypeID = 0xd3435542edb8b51c

func NewReceiver_send_Params(s *capnp.Segment) (Receiver_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Receiver_send_Params{st}, err
}

func NewRootReceiver_send_Params(s *capnp.Segment) (Receiver_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Receiver_send_Params{st}, err
}

func ReadRootReceiver_send_Params(msg *capnp.Message) (Receiver_send_Params, error) {
	root, err := msg.RootPtr()
	return Receiver_send_Params{root.Struct()}, err
}

func (s Receiver_send_Params) String() string {
	str, _ := text.Marshal(0xd3435542edb8b51c, s.Struct)
	return str
}

func (s Receiver_send_Params) Data() (Receiver_SndInfo, error) {
	p, err := s.Struct.Ptr(0)
	return Receiver_SndInfo{Struct: p.Struct()}, err
}

func (s Receiver_send_Params) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Receiver_send_Params) SetData(v Receiver_SndInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewData sets the data field to a newly
// allocated Receiver_SndInfo struct, preferring placement in s's segment.
func (s Receiver_send_Params) NewData() (Receiver_SndInfo, error) {
	ss, err := NewReceiver_SndInfo(s.Struct.Segment())
	if err != nil {
		return Receiver_SndInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Receiver_send_Params_List is a list of Receiver_send_Params.
type Receiver_send_Params_List struct{ capnp.List }

// NewReceiver_send_Params creates a new list of Receiver_send_Params.
func NewReceiver_send_Params_List(s *capnp.Segment, sz int32) (Receiver_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Receiver_send_Params_List{l}, err
}

func (s Receiver_send_Params_List) At(i int) Receiver_send_Params {
	return Receiver_send_Params{s.List.Struct(i)}
}

func (s Receiver_send_Params_List) Set(i int, v Receiver_send_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Receiver_send_Params_List) String() string {
	str, _ := text.MarshalList(0xd3435542edb8b51c, s.List)
	return str
}

// Receiver_send_Params_Promise is a wrapper for a Receiver_send_Params promised by a client call.
type Receiver_send_Params_Promise struct{ *capnp.Pipeline }

func (p Receiver_send_Params_Promise) Struct() (Receiver_send_Params, error) {
	s, err := p.Pipeline.Struct()
	return Receiver_send_Params{s}, err
}

func (p Receiver_send_Params_Promise) Data() Receiver_SndInfo_Promise {
	return Receiver_SndInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Receiver_send_Results struct{ capnp.Struct }

// Receiver_send_Results_TypeID is the unique identifier for the type Receiver_send_Results.
const Receiver_send_Results_TypeID = 0xd91dc9735b90b5a7

func NewReceiver_send_Results(s *capnp.Segment) (Receiver_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Receiver_send_Results{st}, err
}

func NewRootReceiver_send_Results(s *capnp.Segment) (Receiver_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Receiver_send_Results{st}, err
}

func ReadRootReceiver_send_Results(msg *capnp.Message) (Receiver_send_Results, error) {
	root, err := msg.RootPtr()
	return Receiver_send_Results{root.Struct()}, err
}

func (s Receiver_send_Results) String() string {
	str, _ := text.Marshal(0xd91dc9735b90b5a7, s.Struct)
	return str
}

// Receiver_send_Results_List is a list of Receiver_send_Results.
type Receiver_send_Results_List struct{ capnp.List }

// NewReceiver_send_Results creates a new list of Receiver_send_Results.
func NewReceiver_send_Results_List(s *capnp.Segment, sz int32) (Receiver_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Receiver_send_Results_List{l}, err
}

func (s Receiver_send_Results_List) At(i int) Receiver_send_Results {
	return Receiver_send_Results{s.List.Struct(i)}
}

func (s Receiver_send_Results_List) Set(i int, v Receiver_send_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Receiver_send_Results_List) String() string {
	str, _ := text.MarshalList(0xd91dc9735b90b5a7, s.List)
	return str
}

// Receiver_send_Results_Promise is a wrapper for a Receiver_send_Results promised by a client call.
type Receiver_send_Results_Promise struct{ *capnp.Pipeline }

func (p Receiver_send_Results_Promise) Struct() (Receiver_send_Results, error) {
	s, err := p.Pipeline.Struct()
	return Receiver_send_Results{s}, err
}

const schema_e064a1d4489394b5 = "x\xda\x8cUo\x88\x14e\x18\x7f\x9e\xf7\x9dq\xe6\xd2" +
	"s\xf7mV\xc2\xf08\x92\x15t\xe9.\xbb\xcb\xc8\xa3" +
	"\xdam\xefRO,\xf7\xdd\xd5\xa8\xc4\x0f{\xbb\xb3\xee" +
	"\xc4:s\xee\xde\xb9\xb6\x18Wr\x82J\x96\xf9\x87 " +
	"\xca\x94>\x98Q\x04\xc1\x91\x91\x14\x05\x12B}\x08\x8d" +
	"\x90D\xac/\xa1\xd1\x09\x92\x1f\x92`\xe2\x9d\xd9\x99\xd9" +
	"\xdbF\xb7O\xcb\xbb\xf3>\xcf\xf3{~\xbf\xdf\xf3\xbc" +
	"+W\xd3\x14yXN*\x00|\x93<\xcf\xfe\xe7\xf0" +
	"\xec\x81\xc7\x9fxt\x0f0\x8d\xda3G\x8f\xac\xbbx" +
	"\xb2x\x15\x00\xb5\xbd\xf4\xba\xf6\x16]\x0b0\xf8\x0dU" +
	"P\xdb!)\x00\xb6tj\xfc\xf3o\x8d\xbe\xc3\xc0z" +
	"\x10@F\x05`\xf0\x05\xe9\x00\x02j\x86\x94\x04\xb4/" +
	"/\x9cM\xfd|1z\x04x\x0f\xfa7\xde\x93\x1a\xe2" +
	"\xc6i\xe9S@{\xe3\x95\x13\xd7\xdeH<w\xc2\xb9" +
	"\x11\x94\x17\xe9\x07\xb9\x9c@-/+\x00\xdaV\xb9\x0e" +
	"h??]\x9c\x7f\xfbx\xcf\xc7m\x97\xdd\xb4_\xc8" +
	"\xf7\xa2v\xde\xb9}N\x16\xa9ol\xf8\xb1|\xf3\xb3" +
	"\xdf\xbf\x9aS|\xeb<\xa7\xb81O\xdc0\x1b\xcf\x9e" +
	"\xd9\x7fa\xe3\xf7\xa1\xf9\x16)KQ[\xa6\x88|\x0f" +
	"(\xa2\xfa\x92\x993\x7f\xa67\x0f_\x00\xb6\xc4Ow" +
	"PI\x8bt\xc7\x14\xd1\xed\xa9\x99C[j\xe7{." +
	"\xb9\x17\x9c\x16f\x94\xf5\x08\x92\xbd\xe5\xbb\xb3\xbb\x9f<" +
	"\x9e\xbb\xdaJ\xd4Ie\x8f\x08\xfd\xc4\x09\x1d\xb8\xf5\xf5" +
	"\xe9\xc6;\xef^s/8\xa1\xbf\x8a\xef\x92m\xdf>" +
	"|y\xc5\xae\x0b\x7f4\xbbp>\xfd\xe0\x86^rB" +
	"\xef\xf9\xb2\xb4\xfbz\xf6\xc3\xd9\xffH\xf6\xb7\xf2\x9b&" +
	"\xab\xf7\x01h\xdd\xeaZm\x95*\x14\xfbeS\xf4\xfd" +
	"\xe8\x9b\xea\x8d\x96:=jC\xd4\xd9\x81W\x06\xdf>" +
	"7r\x13\xf8\x12$AR\x17k\x97\xba\x14\xb5\xc5\xaa" +
	"C\x8b\xda\x8b\x80\xf6\xd9\\\xe6\xa7\xe1\x0f\xcc\xbf\xc2t" +
	"[\xd65\x86\xda\xea.\xc1\xdc\xaa.\xc1\xdcG\xd1\xf1" +
	"\x95\xd3\xe7\x8d[\xad\xed\x1f\xeb\xaa\x8a\x1eNv%\xa1" +
	"\xcf\xee\xef\x7f\xa8f\x98\x85*\xb1L#\xdf_\xc8\x8f" +
	"\x9b\xe3C\xb9BY/F&+z\x95G\xb1\xc5(" +
	"lq:0\x02[\x94\x08Tdl(\xc0\xc5\xba\x1b" +
	"S\xb9By\xd4,Y\x915\x15\xab\x9e\x1c\xb6J\x15" +
	"\xabn\xbb?\xb9\x02$\xcbzq\xb2\xa2\xf3(\x95\x01" +
	"|\x88\xe81\xc4vd\x810C\xc1\xc0\xc5\xe8\xc9\xc8" +
	"\xb6\xbe\x08\x84mV\x90\xf8\xf2\xa07\x0blt\x0c\x08" +
	"{JA\xea\x1b\x10=u\xd9*\x11\xd7\xa7\xd8U}" +
	"\x9b\x83\x03\xb0\x9eB\xbb\xa6\x9bEq\x04j\x89\xe36" +
	"}\xc2\xe9\x1d\x94\xc9\x8a\x9eB\xbb\xe0 \x1e\xb1\x80\x9a" +
	"z\x0a3\x88>]r;]\x82\xad~/~\xb2\xa2" +
	"\xc7\xb3zm\xb22Q\x03\xe0\x12\x95\x00$\x04`\xdd" +
	"\xeb\x01\xf8\x02\x8a|9A\xbb\xd6\xbc\x09\x00\xb8\x100" +
	"C\x11\xa3\x01\x89\x80\xe2O\xbf\x9e\x14Z\xcf\x83o\xd5" +
	"\xe3\xc9L\xbe\x9a\xdf^\xe3\x0b\xfcbO\x0f\x01\xf0\x14" +
	"E\xbe\x81 C\x8c\x09\x0f\xb3\xd1\x01\x00>B\x91g" +
	"\x08\"\x89!\x01`\xcf\xa4\x01\xf8:\x8a\xbcH0i" +
	"ZE}t\x04U \xa8\x02\xf6\xbed\x8d\x05\xa7)" +
	"Q\xcf0\xb7\x05p}k\xb4\xc1\xa5\xa1ps\x85r" +
	"D\xb8\"\x83\xc8U\x1f\xe7\x0a\x813N\x91\xafl\xc1" +
	"\xd9\x97\x00\xe0\xcb)\xf2G\x08&\x8b\xf9\x89|\x80\"" +
	"R3\x1a\xbaw\xe8PqM\xc5\xc2\xba(\xd7BK" +
	"\"\x8c\x96\xfbChI4i\xd9D0R\xaaZ\xdb" +
	"\xbd\x9at\xc2\xf2\xb1\x08hm<D;\xca\xe6\xd9\xca" +
	"\xd4\xc3d\x1b\x08\xc37\x14\x82O\x98i\x03E^&" +
	"\xaeNE\x0f\x95+\xa2\x7f\xb4K\x86i\xd4\x84\xad\x03" +
	"\xa7\x89O\x9d\x05\x1b\xb6JJ\xc5\xaa\xb7\xe95\x10\xe8" +
	"\xe5\xcb5\xd0\x94k\x84\xb4y\xa6W\xb4Z\x0b\x1c\xe3" +
	"\xef\x8f\xbb\x18<\xab\x17tcg\xd3\xdfq\x97\xa19" +
	"c$\x94Q)\xf2\x18\xf1\x15\xf0\x97\xe8]\x14\x98\x9b" +
	"\xd7\x1f\xd0\x0eC\xdd2d^H+\x96l\xcbHW" +
	"\x9d\x02\x86\x09\xf8?fd~'ox\xd5\xbc\x80\x8e" +
	"+'\x84\xa9\xa1\x80\xa9vW\x84m~\x87!e\xa7" +
	"^\xe5\x12b\xc0)\xc3\xf4T\xce,\x8a\xd9\xe5\x92\xb3" +
	"\xb4\xbd\x17\x19\xbd\x97\x97\xb1\x04\x10&+\x11A\xd7\xdc" +
	"]\x19>\x04\xde\"\xae\xc7\xb3I\xb7\xd1P3\xfa\x9a" +
	"\x89\xfaJsy\xc4\xfc\x06_\x11\xc6\xdbE\x91O\x13" +
	"d\xa4\xe9\xc6\xd7\x84?vS\xe4\xfb\x082\xda\x1c\x97" +
	"\xbdb\xc4_\xa5\xc8_\x17sEcH\x01\xd8~\xc1" +
	"\xcf4E~\x88 J1\x94\x00\xd8A\x11\xbd\x8f\"" +
	"?\xda\xee\xe5;m\x81\xf6\x055V\xb1\xc6\xb0\x1b\x08" +
	"vw\\\x05\xde\x9bX\xd6\x8b\xe2\xcd\xb9\xf3\xa4\x05\x9b" +
	"Q\x8c\xfd\x83\x14\xf9c\xed\xf0\xec\xf1\xaaaU\x8d\x89" +
	"\x97\xc5\x9c\xb7\xab\xdcI\x84L\xaf\xbb\x88Z\xbc\x93n" +
	"z'Np\xca\xb5e\xcb\x1c\xfbO\xbf\xeb\xea\x7f\x03" +
	"\x00\x00\xff\xffI\xe3\xd9t"

func init() {
	schemas.Register(schema_e064a1d4489394b5,
		0x82363d3c8aee92fc,
		0x922d69c2b770a704,
		0x9310d4d740ee0edc,
		0xa0562a8ee9a0de4f,
		0xac1d9efa0b648458,
		0xbee7b2f268d14cef,
		0xcc4fd389b84e7a6e,
		0xd3435542edb8b51c,
		0xd91dc9735b90b5a7,
		0xe0539e3e7cbcc75b,
		0xe99c9a7aa9bff532,
		0xebd37829dc92faff,
		0xeea852ea7c66bb0a,
		0xef088f109f1054db,
		0xf244c59733de0171,
		0xf46ea343d55053bc,
		0xf569c984307010aa)
}
